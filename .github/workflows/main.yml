name: 🚀 Main CI/CD Pipeline

on:
  push:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'

env:
  NODE_VERSION: '18'
  CACHE_KEY_PREFIX: 'node-modules'

jobs:
  # ===============================
  # Quality Gate & Fast Checks
  # ===============================
  quality-gate:
    name: 🔍 Quality Gate
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    outputs:
      should-run-e2e: ${{ steps.check-changes.outputs.should-run-e2e }}

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🎨 ESLint check
        run: npm run lint

      - name: 🔍 TypeScript type checking
        run: |
          npm run typecheck:web
          npm run typecheck:node

      - name: 🧪 Unit tests with coverage
        run: npm run test:coverage

      - name: 📊 Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage/lcov.info
          fail_ci_if_error: false
          verbose: true

      - name: 🏗️ Build web application
        run: npm run build

      - name: 📦 Cache build artifacts
        uses: actions/cache@v4
        with:
          path: |
            dist
            dist-electron
          key: build-${{ github.run_id }}-${{ github.run_number }}

      - name: 🔍 Check if E2E tests should run
        id: check-changes
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-run-e2e=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "pull_request" ]]; then
            # Check if there are significant changes that require E2E testing
            if git diff origin/${{ github.base_ref }}...HEAD --name-only | grep -E "(src/|electron/|index\.html|\.config\.)"; then
              echo "should-run-e2e=true" >> $GITHUB_OUTPUT
            else
              echo "should-run-e2e=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "should-run-e2e=false" >> $GITHUB_OUTPUT
          fi

  # ===============================
  # End-to-End Tests
  # ===============================
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: quality-gate
    if: needs.quality-gate.outputs.should-run-e2e == 'true'

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 📦 Restore build artifacts
        uses: actions/cache@v4
        with:
          path: |
            dist
            dist-electron
          key: build-${{ github.run_id }}-${{ github.run_number }}

      - name: 🎭 Install Playwright dependencies
        run: npx playwright install --with-deps

      - name: 🧪 Run E2E tests
        run: npm run test:e2e:safe

      - name: 📊 Upload Playwright Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ github.run_id }}
          path: playwright-report/
          retention-days: 30

      - name: 📊 Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-results-${{ github.run_id }}
          path: test-results/
          retention-days: 7

  # ===============================
  # Security & Dependency Scan
  # ===============================
  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: quality-gate
    if: github.event_name == 'push' || github.event_name == 'pull_request'

    permissions:
      contents: read
      security-events: write

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🔍 Run npm audit
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: 🔒 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ===============================
  # Status Check Summary
  # ===============================
  ci-success:
    name: ✅ CI Success
    runs-on: ubuntu-latest
    needs: [quality-gate, e2e-tests, security-scan]
    if: always()

    steps:
      - name: 📊 Check all jobs status
        run: |
          echo "Quality Gate: ${{ needs.quality-gate.result }}"
          echo "E2E Tests: ${{ needs.e2e-tests.result }}"
          echo "Security Scan: ${{ needs.security-scan.result }}"

          # Check if quality gate passed (required)
          if [[ "${{ needs.quality-gate.result }}" != "success" ]]; then
            echo "❌ Quality Gate failed"
            exit 1
          fi

          # Check E2E tests if they ran
          if [[ "${{ needs.e2e-tests.result }}" == "failure" ]]; then
            echo "❌ E2E Tests failed"
            exit 1
          fi

          # Security scan is allowed to fail (for now)
          if [[ "${{ needs.security-scan.result }}" == "failure" ]]; then
            echo "⚠️ Security scan had issues (not blocking)"
          fi

          echo "✅ All critical checks passed!"

      - name: 🎉 Success notification
        if: success()
        run: |
          echo "🎉 CI Pipeline completed successfully!"
          echo "📊 Summary:"
          echo "   ✅ Code quality checks passed"
          echo "   ✅ All tests passed"
          echo "   ✅ Build successful"
          echo "   ✅ Ready for deployment!"
