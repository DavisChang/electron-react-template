name: 📊 SonarQube Code Analysis

on:
  # Run after main CI completes successfully
  workflow_run:
    workflows: ['🚀 Main CI/CD Pipeline']
    types: [completed]
    branches: [main, develop]

  # Also run on pull requests for immediate feedback
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]
    paths-ignore:
      - '**.md'
      - 'docs/**'

env:
  NODE_VERSION: '18'

jobs:
  sonarqube-analysis:
    name: 🔍 SonarQube Quality Analysis
    runs-on: ubuntu-latest
    # Only run if main CI passed (for workflow_run) or on PR
    if: >
      github.event_name == 'pull_request' ||
      (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success')

    permissions:
      contents: read
      pull-requests: write

    steps:
      - name: 📂 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Shallow clones for better SonarQube analysis
          # For workflow_run events, checkout the head commit
          ref: ${{ github.event_name == 'workflow_run' && github.event.workflow_run.head_sha || github.sha }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🧪 Generate test coverage (required for SonarQube)
        run: npm run test:coverage

      - name: 📊 SonarQube Code Analysis
        uses: SonarSource/sonarqube-scan-action@v4
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: ⏳ SonarQube Quality Gate Check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 10 # Increased timeout for better reliability
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: 📊 Quality Gate Status Summary
        run: |
          echo "🎯 SonarQube Quality Gate Status: ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"
          echo "📊 Project: DavisChang_electron-react-template"
          echo "🔗 View results: https://sonarcloud.io/project/overview?id=DavisChang_electron-react-template"

          if [[ "${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}" == "FAILED" ]]; then
            echo "❌ Quality Gate Failed!"
            echo "🛠️ Common fixes:"
            echo "   • Check test coverage (minimum 10% required)"
            echo "   • Review code complexity issues" 
            echo "   • Fix security vulnerabilities"
            echo "   • Address maintainability issues"
          else
            echo "✅ Quality Gate Passed!"
          fi

      - name: ❌ Quality Gate Failure Handler
        if: steps.sonarqube-quality-gate-check.outputs.quality-gate-status == 'FAILED'
        run: |
          echo "::error title=SonarQube Quality Gate Failed::Please fix the code quality issues before merging."
          echo "::notice title=Next Steps::Visit SonarCloud dashboard to see detailed analysis results"
          exit 1

      - name: 💬 Add PR Comment with SonarQube Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const qualityGateStatus = '${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}';
            const projectKey = 'DavisChang_electron-react-template';
            const sonarCloudUrl = `https://sonarcloud.io/project/overview?id=${projectKey}&pullRequest=${{ github.event.number }}`;

            const statusEmoji = qualityGateStatus === 'PASSED' ? '✅' : '❌';
            const statusText = qualityGateStatus === 'PASSED' ? 'PASSED' : 'FAILED';
            const timestamp = new Date().toLocaleString('en-US', { 
              timeZone: 'Asia/Taipei',
              year: 'numeric',
              month: '2-digit', 
              day: '2-digit',
              hour: '2-digit',
              minute: '2-digit'
            });

            const comment = `## ${statusEmoji} SonarQube Code Analysis Results

            **Quality Gate Status:** \`${statusText}\`  
            **Analysis Time:** ${timestamp} (Taiwan Time)  
            **Coverage Threshold:** 10% (relaxed for development)

            ### 📊 Analysis Details
            - **Code Quality:** ${qualityGateStatus === 'PASSED' ? '✅ Meets standards' : '❌ Issues found'}
            - **Test Coverage:** ${qualityGateStatus === 'PASSED' ? '✅ Sufficient' : '⚠️ Check coverage'}
            - **Security:** ${qualityGateStatus === 'PASSED' ? '✅ No vulnerabilities' : '🔍 Review required'}
            - **Maintainability:** ${qualityGateStatus === 'PASSED' ? '✅ Good' : '🔧 Improvements needed'}

            ### 🔗 Actions
            📊 **[View Detailed Analysis on SonarCloud →](${sonarCloudUrl})**

            ${qualityGateStatus === 'FAILED' ? 
              `### ⚠️ Quality Gate Failed
              **This PR cannot be merged until quality issues are resolved.**
              
              **Common Solutions:**
              - 🧪 Increase test coverage to at least 10%
              - 🔧 Fix code complexity issues
              - 🛡️ Address security vulnerabilities  
              - 📝 Improve code maintainability
              
              **Need Help?** Check the [Quality Control Documentation](../blob/main/docs/QUALITY_CONTROL_SYSTEM_OVERVIEW.md)` : 
              `### 🎉 Quality Gate Passed!
              **Excellent work! Your code meets all quality standards.**
              
              ✅ Ready for code review and merge!`
            }

            ---
            *Automated by SonarQube Quality Gate • [Configure Settings](../blob/main/sonar-project.properties)*
            `;

            // Check if there's already a SonarQube comment
            const { data: comments } = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.find(comment => 
              comment.body.includes('SonarQube Code Analysis Results')
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
